---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
const cards = [
      { "slug": "c",
        "title": "Curiosity",
        "title_css": "from-orange-400 to-amber-600",
       "description": "I have plenty of things to investigate and to think about"},
      { "slug": "h",
        "title": "Honor",
        "title_css": "from-cyan-400 to-sky-600",
       "description": "I feel proud that my personal values are reflected in how I work."},
      { "slug": "a",
        "title": "Acceptance",
        "title_css": "from-yellow-400 to-lime-600",
       "description": "The people around me approve of what I do and who I am."},
      { "slug": "m",
        "title": "Mastery",
        "title_css": "from-teal-400 to-cyan-600",
       "description": "My work challenges my competence but it is still within my abilities."},
      { "slug": "p",
        "title": "Power",
        "title_css": "from-amber-400 to-yellow-600",
       "description": "Thereâ€™s enough room for me to influence what happens around me."},
      { "slug": "f",
        "title": "Freedom",
        "title_css": "from-red-400 to-orange-600",
       "description": "I am independent of others with my work and my responsibilities."},
      { "slug": "r",
        "title": "Relatedness",
        "title_css": "from-emerald-400 to-teal-600",
       "description": "I have good social contacts with the people in my work."},
      { "slug": "o",
        "title": "Order",
        "title_css": "from-pink-400 to-rose-600",
       "description": "There are enough rules and policies for a stable environment."},
      { "slug": "g",
        "title": "Goal",
        "title_css": "from-indigo-400 to-violet-600",
       "description": "My purpose in life is reflected in the work that I do."},
      { "slug": "s",
        "title": "Status",
        "title_css": "from-fuchsia-400 to-pink-600",
       "description": "My position is good, and recognized by the people who work with me."}
    ]
---

<Layout title="10 Motivations: CHAMPFROGS">
	<main>
		<section class="text-gray-600 body-font">
		<div class="container px-5 py-24 mx-auto">
			<div class="flex flex-col text-center w-full mb-20">
			<h1 class="sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900">10 Motivations: CHAMPFROGS</h1>
			<p class="lg:w-2/3 mx-auto leading-relaxed text-base">The ten CHAMPFROGS motivators are either intrinsic, extrinsic, or a bit of both. The CHAMPFROGS model deals specifically with motivation in the context of work-life.</p>
			</div>

			<div class="flex flex-wrap -m-4 items-center" id="items">

			<div class="lg:w-1/3 sm:w-1/2 px-8 sm:px-4 py-4 w-full" data-no-draggable data-id="top">
				<div class="flex relative">
				<div class="px-8 py-10 relative z-10 w-full  bg-gradient-to-r from-lime-400 to-emerald-600">
					<h2 class="font-extrabold text-transparent text-5xl text-white text-center">TOP</h2>
				</div>
				</div>
			</div>

			{ cards.map((card)=> (<Card {...card}></Card>)) }

			<div class="lg:w-1/3 sm:w-1/2 px-8 sm:px-4 py-4 w-full" data-no-draggable data-id="bottom">
				<div class="flex relative">
				<div class="px-8 py-10 relative z-10 w-full  bg-gradient-to-r from-rose-400 to-pink-600">
					<h2 class="font-extrabold text-transparent text-5xl text-white text-center">BOTTOM</h2>
				</div>
				</div>
			</div>

			</div>
		</div>
		</section>
	</main>
</Layout>

<script>
	// import Sortable from 'sortablejs';
	import Sortable from 'https://esm.sh/sortablejs@1.15.0';

	var el = document.getElementById('items');
	var sortable = Sortable.create(
		el,
		{
			filter: '[data-no-draggable]',
			animation: 150,
			handle: '.handle',

			// Event when you move an item in the list or between lists
			onMove: function (evt, originalEvent) {
			if(evt.related.dataset.noDraggable !== void(0)) { return false }
			},
			onEnd: function (evt) {
			var itemEl = evt.item;

			const list = Array.from(itemEl.parentElement.querySelectorAll(":scope>:not([data-no-draggable])")).map((el) => {
				return el.dataset.id
			})

			const url = new URL(location);
			url.searchParams.set("order", list.join(""));
			history.pushState({}, "", url);
			},
		}
	);

	const searchParams = new URLSearchParams(window.location.search);
	const order = searchParams.get('order') || "champfrogs"

	sortable.sort(["top", ...order ,"bottom"])
</script>